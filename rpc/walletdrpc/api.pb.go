// Code generated by protoc-gen-go.
// source: api.proto
// DO NOT EDIT!

/*
Package walletdrpc is a generated protocol buffer package.

It is generated from these files:
	api.proto

It has these top-level messages:
	VersionRequest
	VersionResponse
	PingRequest
	PingResponse
	NetworkRequest
	NetworkResponse
*/
package walletdrpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type VersionRequest struct {
}

func (m *VersionRequest) Reset()                    { *m = VersionRequest{} }
func (m *VersionRequest) String() string            { return proto.CompactTextString(m) }
func (*VersionRequest) ProtoMessage()               {}
func (*VersionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type VersionResponse struct {
	VersionString string `protobuf:"bytes,1,opt,name=version_string,json=versionString" json:"version_string,omitempty"`
	Major         uint32 `protobuf:"varint,2,opt,name=major" json:"major,omitempty"`
	Minor         uint32 `protobuf:"varint,3,opt,name=minor" json:"minor,omitempty"`
	Patch         uint32 `protobuf:"varint,4,opt,name=patch" json:"patch,omitempty"`
	Prerelease    string `protobuf:"bytes,5,opt,name=prerelease" json:"prerelease,omitempty"`
	BuildMetadata string `protobuf:"bytes,6,opt,name=build_metadata,json=buildMetadata" json:"build_metadata,omitempty"`
}

func (m *VersionResponse) Reset()                    { *m = VersionResponse{} }
func (m *VersionResponse) String() string            { return proto.CompactTextString(m) }
func (*VersionResponse) ProtoMessage()               {}
func (*VersionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *VersionResponse) GetVersionString() string {
	if m != nil {
		return m.VersionString
	}
	return ""
}

func (m *VersionResponse) GetMajor() uint32 {
	if m != nil {
		return m.Major
	}
	return 0
}

func (m *VersionResponse) GetMinor() uint32 {
	if m != nil {
		return m.Minor
	}
	return 0
}

func (m *VersionResponse) GetPatch() uint32 {
	if m != nil {
		return m.Patch
	}
	return 0
}

func (m *VersionResponse) GetPrerelease() string {
	if m != nil {
		return m.Prerelease
	}
	return ""
}

func (m *VersionResponse) GetBuildMetadata() string {
	if m != nil {
		return m.BuildMetadata
	}
	return ""
}

type PingRequest struct {
}

func (m *PingRequest) Reset()                    { *m = PingRequest{} }
func (m *PingRequest) String() string            { return proto.CompactTextString(m) }
func (*PingRequest) ProtoMessage()               {}
func (*PingRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type PingResponse struct {
}

func (m *PingResponse) Reset()                    { *m = PingResponse{} }
func (m *PingResponse) String() string            { return proto.CompactTextString(m) }
func (*PingResponse) ProtoMessage()               {}
func (*PingResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type NetworkRequest struct {
}

func (m *NetworkRequest) Reset()                    { *m = NetworkRequest{} }
func (m *NetworkRequest) String() string            { return proto.CompactTextString(m) }
func (*NetworkRequest) ProtoMessage()               {}
func (*NetworkRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type NetworkResponse struct {
	ActiveNetwork uint32 `protobuf:"varint,1,opt,name=active_network,json=activeNetwork" json:"active_network,omitempty"`
}

func (m *NetworkResponse) Reset()                    { *m = NetworkResponse{} }
func (m *NetworkResponse) String() string            { return proto.CompactTextString(m) }
func (*NetworkResponse) ProtoMessage()               {}
func (*NetworkResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *NetworkResponse) GetActiveNetwork() uint32 {
	if m != nil {
		return m.ActiveNetwork
	}
	return 0
}

func init() {
	proto.RegisterType((*VersionRequest)(nil), "walletdrpc.VersionRequest")
	proto.RegisterType((*VersionResponse)(nil), "walletdrpc.VersionResponse")
	proto.RegisterType((*PingRequest)(nil), "walletdrpc.PingRequest")
	proto.RegisterType((*PingResponse)(nil), "walletdrpc.PingResponse")
	proto.RegisterType((*NetworkRequest)(nil), "walletdrpc.NetworkRequest")
	proto.RegisterType((*NetworkResponse)(nil), "walletdrpc.NetworkResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for VersionService service

type VersionServiceClient interface {
	Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionResponse, error)
}

type versionServiceClient struct {
	cc *grpc.ClientConn
}

func NewVersionServiceClient(cc *grpc.ClientConn) VersionServiceClient {
	return &versionServiceClient{cc}
}

func (c *versionServiceClient) Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionResponse, error) {
	out := new(VersionResponse)
	err := grpc.Invoke(ctx, "/walletdrpc.VersionService/Version", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for VersionService service

type VersionServiceServer interface {
	Version(context.Context, *VersionRequest) (*VersionResponse, error)
}

func RegisterVersionServiceServer(s *grpc.Server, srv VersionServiceServer) {
	s.RegisterService(&_VersionService_serviceDesc, srv)
}

func _VersionService_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersionServiceServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletdrpc.VersionService/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersionServiceServer).Version(ctx, req.(*VersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _VersionService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "walletdrpc.VersionService",
	HandlerType: (*VersionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Version",
			Handler:    _VersionService_Version_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

// Client API for WalletDaemonService service

type WalletDaemonServiceClient interface {
	// Queries
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	Network(ctx context.Context, in *NetworkRequest, opts ...grpc.CallOption) (*NetworkResponse, error)
}

type walletDaemonServiceClient struct {
	cc *grpc.ClientConn
}

func NewWalletDaemonServiceClient(cc *grpc.ClientConn) WalletDaemonServiceClient {
	return &walletDaemonServiceClient{cc}
}

func (c *walletDaemonServiceClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := grpc.Invoke(ctx, "/walletdrpc.WalletDaemonService/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletDaemonServiceClient) Network(ctx context.Context, in *NetworkRequest, opts ...grpc.CallOption) (*NetworkResponse, error) {
	out := new(NetworkResponse)
	err := grpc.Invoke(ctx, "/walletdrpc.WalletDaemonService/Network", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for WalletDaemonService service

type WalletDaemonServiceServer interface {
	// Queries
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	Network(context.Context, *NetworkRequest) (*NetworkResponse, error)
}

func RegisterWalletDaemonServiceServer(s *grpc.Server, srv WalletDaemonServiceServer) {
	s.RegisterService(&_WalletDaemonService_serviceDesc, srv)
}

func _WalletDaemonService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletDaemonServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletdrpc.WalletDaemonService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletDaemonServiceServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletDaemonService_Network_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletDaemonServiceServer).Network(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletdrpc.WalletDaemonService/Network",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletDaemonServiceServer).Network(ctx, req.(*NetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _WalletDaemonService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "walletdrpc.WalletDaemonService",
	HandlerType: (*WalletDaemonServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _WalletDaemonService_Ping_Handler,
		},
		{
			MethodName: "Network",
			Handler:    _WalletDaemonService_Network_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func init() { proto.RegisterFile("api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 311 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x92, 0xdf, 0x4a, 0xc3, 0x30,
	0x18, 0xc5, 0xa9, 0x6e, 0x93, 0x7d, 0xda, 0x4d, 0xa2, 0x60, 0x98, 0x20, 0x32, 0x10, 0xbc, 0xda,
	0xc5, 0xbc, 0xd1, 0x5b, 0xf1, 0x56, 0x91, 0x4e, 0xf4, 0x72, 0x64, 0xed, 0x87, 0x46, 0xdb, 0x26,
	0x26, 0x59, 0xf7, 0x22, 0xbe, 0x90, 0x6f, 0x66, 0x9b, 0x64, 0xfd, 0xa3, 0x5e, 0x9e, 0xdf, 0x49,
	0x9b, 0x73, 0x0e, 0x81, 0x21, 0x93, 0x7c, 0x26, 0x95, 0x30, 0x82, 0xc0, 0x86, 0xa5, 0x29, 0x9a,
	0x44, 0xc9, 0x78, 0x7a, 0x08, 0xa3, 0x67, 0x54, 0x9a, 0x8b, 0x3c, 0xc2, 0xcf, 0x35, 0x6a, 0x33,
	0xfd, 0x0e, 0x60, 0x5c, 0x23, 0x2d, 0x45, 0xae, 0x91, 0x5c, 0xc0, 0xa8, 0x70, 0x68, 0xa9, 0x8d,
	0xe2, 0xf9, 0x2b, 0x0d, 0xce, 0x83, 0xcb, 0x61, 0x14, 0x7a, 0xba, 0xb0, 0x90, 0x1c, 0x43, 0x3f,
	0x63, 0xef, 0x42, 0xd1, 0x9d, 0xd2, 0x0d, 0x23, 0x27, 0x2c, 0xe5, 0x79, 0x49, 0x77, 0x3d, 0xad,
	0x44, 0x45, 0x25, 0x33, 0xf1, 0x1b, 0xed, 0x39, 0x6a, 0x05, 0x39, 0x03, 0x90, 0x0a, 0x15, 0xa6,
	0xc8, 0x34, 0xd2, 0xbe, 0xbd, 0xa4, 0x45, 0xaa, 0x20, 0xab, 0x35, 0x4f, 0x93, 0x65, 0x86, 0x86,
	0x25, 0xcc, 0x30, 0x3a, 0x70, 0x41, 0x2c, 0xbd, 0xf7, 0x70, 0x1a, 0xc2, 0xfe, 0x63, 0x19, 0x68,
	0x5b, 0x69, 0x04, 0x07, 0x4e, 0xba, 0x3a, 0x55, 0xe9, 0x07, 0x34, 0x1b, 0xa1, 0x3e, 0xb6, 0x27,
	0xae, 0x61, 0x5c, 0x93, 0xa6, 0x33, 0x8b, 0x0d, 0x2f, 0x70, 0x99, 0x3b, 0xc7, 0x76, 0x0e, 0xa3,
	0xd0, 0x51, 0x7f, 0x7c, 0xfe, 0x54, 0x0f, 0xb8, 0x40, 0x55, 0xf0, 0x18, 0xc9, 0x2d, 0xec, 0x79,
	0x42, 0x26, 0xb3, 0x66, 0xea, 0x59, 0x77, 0xe7, 0xc9, 0xe9, 0xbf, 0x9e, 0xbb, 0x7c, 0xfe, 0x15,
	0xc0, 0xd1, 0x8b, 0xb5, 0xef, 0x18, 0x66, 0xcd, 0xbf, 0x6f, 0xa0, 0x57, 0x35, 0x21, 0x27, 0xed,
	0x8f, 0x5b, 0x55, 0x27, 0xf4, 0xaf, 0xe1, 0xfb, 0x94, 0xb1, 0x7c, 0xe6, 0x6e, 0xac, 0xee, 0x12,
	0xdd, 0x58, 0xbf, 0x36, 0x59, 0x0d, 0xec, 0x03, 0xba, 0xfa, 0x09, 0x00, 0x00, 0xff, 0xff, 0x84,
	0x8a, 0x1e, 0xb1, 0x4d, 0x02, 0x00, 0x00,
}
